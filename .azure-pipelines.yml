trigger:
  branches:
    include:
      - master
  tags:
    include:
      - v*
variables:
  isReleaseBuild: $[contains(variables['Build.SourceBranch'], 'tags')]
jobs:
  - job: Linux
    variables:
      target: x86_64-unknown-linux-gnu
      artifactName: texlab-x86_64-linux
    pool:
      vmImage: "ubuntu-16.04"
    steps:
      - script: |
          sudo apt-get update
          sudo apt-get install -y texlive-latex-base latexmk chktex
        displayName: "Install TeX Live"
      - script: |
          yarn --cwd citeproc install
          yarn --cwd citeproc dist
          cargo test --all
        displayName: "Run unit and integration tests"
      - bash: |
          cargo build --release --target $(target)
          cp target/$(target)/texlab $(Build.ArtifactStagingDirectory)/$(artifactName)
        condition: and(succeeded(), eq(variables['isReleaseBuild'], 'true'))
        displayName: "Build release artifact"
      - publish: $(Build.ArtifactStagingDirectory)
        artifact: Linux
  - job: Windows
    variables:
      target: x86_64-pc-windows-msvc
      artifactName: texlab-x86_64-windows.exe
      miktexSetup: https://miktex.org/download/ctan/systems/win32/miktex/setup/windows-x64/miktexsetup-2.9.6942-x64.zip
    pool:
      vmImage: "vs2017-win2016"
    steps:
      - powershell: |
          Invoke-WebRequest -Uri $(miktexSetup) -OutFile miktexsetup.zip
          Expand-Archive miktexsetup.zip -DestinationPath .
          .\miktexsetup.exe --package-set=basic download
          .\miktexsetup.exe install
        displayName: "Install MiKTeX"
      - script: |
          yarn --cwd citeproc install
          yarn --cwd citeproc dist
          cargo test --all
        displayName: "Run unit and integration tests"
      - script: |
          cargo build --release --target $(target)
          copy target\$(target)\texlab.exe $(Build.ArtifactStagingDirectory)\$(artifactName)
        condition: and(succeeded(), eq(variables['isReleaseBuild'], 'true'))
        displayName: "Build release artifact"
      - publish: $(Build.ArtifactStagingDirectory)
        artifact: Windows
  - job: macOS
    variables:
      target: x86_64-apple-darwin
      artifactName: texlab-x86_64-darwin
    pool:
      vmImage: "macos-10.14"
    steps:
      - bash: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path --default-toolchain none
          echo "##vso[task.prependpath]$HOME/.cargo/bin"
          brew cask install basictex
          echo "##vso[task.prependpath]/Library/TeX/texbin"
        displayName: "Install rustup and BasicTeX"
      - bash: |
          sudo tlmgr update --self
          sudo tlmgr install latexmk chktex
        displayName: "Install LaTeX dependencies"
      - script: |
          yarn --cwd citeproc install
          yarn --cwd citeproc dist
          cargo test --all
        displayName: "Run unit and integration tests"
      - bash: |
          cargo build --release --target $(target)
          cp target/$(target)/texlab $(Build.ArtifactStagingDirectory)/$(artifactName)
        condition: and(succeeded(), eq(variables['isReleaseBuild'], 'true'))
        displayName: "Build release artifact"
      - publish: $(Build.ArtifactStagingDirectory)
        artifact: macOS
  - job: Publish
    dependsOn:
      - Linux
      - Windows
      - macOS
    condition: |
      and(
        eq(variables['isReleaseBuild'], 'true'),
        succeeded('Linux'), 
        succeeded('Windows'), 
        succeeded('macOS'))
    steps:
      - download: current
      - task: GitHubRelease@0
        inputs:
          gitHubConnection: latex-lsp
          repositoryName: latex-lsp/texlab
          assets: $(Pipeline.Workspace)/**/texlab*
        displayName: "Create GitHub release"
