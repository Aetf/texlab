parameters:
  executableName: ""
  archiveFile: ""
  archiveType: ""
  linux: false
steps:
  - task: NodeTool@0
    inputs:
      versionSpec: ">=10.x"
    displayName: "Install Node.js"
  - task: UsePythonVersion@0
    inputs:
      versionSpec: "3.7"
      architecture: "x64"
    displayName: "Install Python"
  - ${{ if eq(parameters.linux, 'false') }}:
      - bash: |
          export RUST_BACKTRACE=1
          cargo test --all --locked
        displayName: "Run tests"
  - ${{ if eq(parameters.linux, 'true') }}:
      - bash: |
          cargo install grcov
          export CARGO_INCREMENTAL=0
          export RUSTFLAGS="-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zno-landing-pads"
          export RUST_BACKTRACE=1
          cargo test --all --locked
        displayName: "Run tests with coverage"
      - script: python -m pip install --upgrade pip setuptools wheel
        displayName: "Install Python tools"
      - bash: |
          zip -0 ccov.zip `find . \( -name "texlab*.gc*" -o -name "deps*build*.gc*" -o -name "completion*.gc*" -o -name "definition*.gc*" -o -name "diagnostics*.gc*" -o -name "formatting*.gc*" -o -name "hover*.gc*" -o -name "synchronization*.gc*" \) -print`;
          grcov ccov.zip -s . -t lcov --llvm --branch --ignore-not-existing --ignore-dir "{/*,target/*}" -o lcov.info
          python -m pip install lcov_cobertura
          python -m lcov_cobertura lcov.info
        displayName: "Build coverage report"
      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: cobertura
          summaryFileLocation: "coverage.xml"
        displayName: "Publish coverage report"
  - ${{ if contains(variables['Build.SourceBranch'], 'tags') }}:
      - bash: |
          cargo build --release --locked
        displayName: "Build release artifact"
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: "target/release/${{ parameters.executableName }}"
          archiveType: ${{ parameters.archiveType }}
          tarCompression: "gz"
          archiveFile: "$(Build.ArtifactStagingDirectory)/${{ parameters.archiveFile }}"
        displayName: "Compress release artifact"
      - publish: $(Build.ArtifactStagingDirectory)
        artifact: ${{ parameters.archiveFile }}
        displayName: "Publish release artifact"
      - ${{ if eq(parameters.linux, 'true') }}:
          - bash: |
              cargo install cargo-deb
              cargo deb
              mv target/debian/texlab* target/debian/texlab-x86_64-debian.deb
            displayName: "Build Debian package"
          - publish: target/debian
            artifact: texlab-x86_64-debian.deb
            displayName: "Publish Debian artifact"
          - bash: |
              cargo install cargo-rpm
              cargo rpm build -v
              mv target/release/rpmbuild/RPMS/x86_64/texlab* target/release/rpmbuild/RPMS/x86_64/texlab-x86_64-rhel.rpm
            displayName: "Build RHEL package"
          - publish: target/release/rpmbuild/RPMS/x86_64
            artifact: texlab-x86_64-rhel.rpm
            displayName: "Publish RHEL artifact"
