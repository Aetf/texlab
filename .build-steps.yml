parameters:
  target: ""
  executableName: ""
  artifactName: ""
  coverage: false

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: ">=10.x"
    displayName: "Install Node.js"
  - bash: |
      cd citeproc
      npm ci
      npm run dist
    displayName: "Bundle citeproc"
  - ${{ if eq(parameters.coverage, 'false') }}:
      - bash: |
          export RUST_BACKTRACE=1
          cargo test --all
        displayName: "Run tests"
  - ${{ if eq(parameters.coverage, 'true') }}:
      - bash: |
          cargo install grcov
          export CARGO_INCREMENTAL=0
          export RUSTFLAGS="-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zno-landing-pads"
          export RUST_BACKTRACE=1
          cargo test --all
        displayName: "Run tests with coverage"
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "3.7"
          architecture: "x64"
      - script: python -m pip install --upgrade pip setuptools wheel
        displayName: "Install Python tools"
      - bash: |
          zip -0 ccov.zip `find . \( -name "texlab*.gc*" -o -name "deps*build*.gc*" -o -name "completion*.gc*" -o -name "definition*.gc*" -o -name "diagnostics*.gc*" -o -name "formatting*.gc*" -o -name "hover*.gc*" -o -name "synchronization*.gc*" \) -print`;
          grcov ccov.zip -s . -t lcov --llvm --branch --ignore-not-existing --ignore-dir "{/*,target/*}" -o lcov.info
          python -m pip install lcov_cobertura
          python -m lcov_cobertura lcov.info
        displayName: "Build coverage report"
      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: cobertura
          summaryFileLocation: "coverage.xml"
        displayName: "Publish coverage report"
  - bash: |
      cargo build --release --target ${{ parameters.target }}
      cp target/${{ parameters.target }}/${{ parameters.executableName }} $(Build.ArtifactStagingDirectory)/${{ parameters.artifactName }}
    condition: and(succeeded(), eq(variables['isReleaseBuild'], 'true'))
    displayName: "Build release artifact"
  - publish: $(Build.ArtifactStagingDirectory)
    artifact: ${{ parameters.artifactName }}
    condition: and(succeeded(), eq(variables['isReleaseBuild'], 'true'))
